name: CI/CD Pipeline

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  lint-client:
    name: Lint Client (Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-node-

      - name: Install dependencies
        working-directory: client
        run: npm ci

      - name: Run lint
        working-directory: client
        run: npm run lint

  build-deploy-client:
    name: Deploy & Build Client (Frontend) to MyDevil
    runs-on: ubuntu-latest
    environment: production
    needs: lint-client
    env:
      API_HOST: ${{ secrets.API_HOST }}
      NEXT_PUBLIC_API_HOST: ${{ secrets.NEXT_PUBLIC_API_HOST }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache npm dependencies and .next/cache
        uses: actions/cache@v4
        with:
          path: |
            client/node_modules
            client/.next/cache
          key: ${{ runner.os }}-client-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-node-

      - name: Install dependencies
        working-directory: client
        run: npm ci

      - name: Build client
        working-directory: client
        run: npm run build
        env:
          API_HOST: ${{ secrets.API_HOST }}
          NEXT_PUBLIC_API_HOST: ${{ secrets.NEXT_PUBLIC_API_HOST }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to MyDevil
        run: |
          rsync -avz --delete \
          --exclude='.husky' \
          --exclude='.gitignore' \
          --exclude='node_modules' \
          --exclude='.env*' \
          --exclude='next-env.d.ts' \
          --exclude='postcss.config.mjs' \
          --exclude='tailwind.config.ts' \
          --exclude='.eslintrc.json' \
          --exclude='README.md' \
          --exclude='tsconfig.json' \
          --exclude='tmp' \
          ./client/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/domains/${{ vars.FRONTEND_DOMAIN }}/public_nodejs/

      - name: Create .env file on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo "${{ secrets.CLIENT_ENV }}" | base64 -d > ~/domains/${{ vars.FRONTEND_DOMAIN }}/public_nodejs/.env.local'

      - name: Run deployment script on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash ~/domains/${{ vars.FRONTEND_DOMAIN }}/public_nodejs/deployment.sh'

  build-server:
    name: Build & Test Server (Backend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-node-

      - name: Install dependencies
        working-directory: server
        run: npm ci

      - name: Build server (test compilation)
        working-directory: server
        run: npm run build
        env:
          API_HOST: ${{ secrets.API_HOST }}
          NEXT_PUBLIC_API_HOST: ${{ secrets.NEXT_PUBLIC_API_HOST }}
          API_TOKEN: ${{ secrets.API_TOKEN }}

  deploy-server:
    name: Deploy Server (Backend) to MyDevil
    runs-on: ubuntu-latest
    environment: production
    needs: build-server
    env:
      API_HOST: ${{ secrets.API_HOST }}
      NEXT_PUBLIC_API_HOST: ${{ secrets.NEXT_PUBLIC_API_HOST }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Clean server directory
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cd ~/domains/${{ vars.SERVER_DOMAIN }}/public_nodejs/ && rm -rf build .cache'
      
      - name: Deploy source code to MyDevil
        run: |
          rsync -avz --delete \
          --exclude='.gitignore' \
          --exclude='.env*' \
          --exclude='README.md' \
          --exclude='tmp' \
          --exclude='node_modules' \
          --exclude='build' \
          --exclude='.cache' \
          --exclude='types' \
          --exclude='tsconfig.json' \
          ./server/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/domains/${{ vars.SERVER_DOMAIN }}/public_nodejs/

      - name: Create .env file on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo "${{ secrets.SERVER_ENV }}" | base64 -d > ~/domains/${{ vars.SERVER_DOMAIN }}/public_nodejs/.env'

      - name: Build and deploy on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash ~/domains/${{ vars.SERVER_DOMAIN }}/public_nodejs/deployment.sh'